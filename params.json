{"name":"Mondrian","tagline":"A static php code analysis tool using the Graph Theory","body":"# Mondrian\r\n\r\nOk guyz, you have a master degree in [Graph Theory][1], you follow [Law of Demeter][2]\r\nand you live on [S.O.L.I.D][3] principles ?\r\n\r\nLet's have some Fun ! (^Ï‰^)\r\n\r\n## What\r\nIt is a set of CLI tools to help you to analyse and refactor highly coupled classes.\r\nAs you know Law of Demeter and S.O.L.I.D guidances, you need your classes loosely\r\ncoupled. And for this, there is one only rule : **ABSTRACTION**\r\n\r\n![From Hell To Kiss](./Resources/doc/img/abstracting.png)\r\n\r\nThis app provides some helpers to add abstraction into concrete classes\r\nwith minimum pain.\r\n\r\n## How\r\nThis app does not analyse the details of implementation itself but its structure\r\nand particullary its dependencies between types, a.k.a the \"[efferent coupling][6]\".\r\n\r\nWith the proprer vocabulary (\"class\", \"interface\", \"method signature\", \"parameter\" and\r\n\"implementation\") and a proper grammar (\"depends on\", \"typed with\", \"inherits from\"\r\netc...), each source code can be transformed into a [directed graph][5] (or digraph).\r\n\r\nThen, with this abstract representation, it uses some algorithms and some\r\npowerfull properties of the graph theory to find what's wrong with the\r\nsource code.\r\n\r\nUnlike other tools like PDepend which produce code metrics (or statistics) on coupling,\r\nit goes into a level of atomicity to indeed infer where problems are located.\r\n\r\n## Why\r\nTo ease refactoring, the first thing is to decouple your \"monolith\". Yes you can\r\nre-code a method but the real quality of code is its conformance to the\r\nlaw of Demeter and for that, it's not about average length of methods, code\r\ncoverage, or number of methods per class or their inheritance depth.\r\n\r\nOk, it's a hint but like any other statistics, it's only a general picture,\r\nnot a way to guide you and answer to the question :\r\n\"Where do I begin to refactor the real shit ?\"\r\n\r\nThat's what I try to make with this app by using the fascinating graph theory.\r\nI sincerly hope it will help you.\r\n\r\n## Where\r\n\r\n### Center of the universe\r\nThis tool find the \"center of the source code\". More precisely\r\nit calculates the [centrality][7] of the digraph with the [eigenvectors][8] of the\r\n[adjacency matrix][9]. With this you can determinate what component is critical\r\nand what component could be refactored later.\r\n\r\n### Code metrics\r\nOf course there is statistics, it is usefull to evaluates the quality of\r\ncode. Several algorithms try to find the circumference, radius and some\r\nother properties of the digraph.\r\n\r\n### Strongly Connected Components\r\nCan be renamed : How to avoid cyclic dependencies ? When yo have a cycle in\r\nsource code, you are really screwd because it's very difficult to know where to\r\nbreak it. This tool finds [cycles between vertices][4] in the digraph.\r\n\r\n### Highly coupled implementation\r\nLike Tyler Durden could say :\r\n    The first rule of coding is \"You do NOT talk about concrete class\"\r\n\r\nThis tool finds paths between two implementations represented by\r\ntwo vertices in the digraph.\r\n\r\n### Hidden coupling\r\nUnlike strong typed language, PHP has one thing to make refactoring difficultier :\r\nTwo poorly-coded classes could be coupled without reference in each other.\r\nThis tool try to find hidden coupling by searching for path in the digraph.\r\n\r\n## TODO\r\n\r\nI want to use the d3js libray to make a dynamic tool for refactoring.\r\n\r\n[1]: http://en.wikipedia.org/wiki/Graph_theory\r\n[2]: http://en.wikipedia.org/wiki/Law_of_Demeter\r\n[3]: http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)\r\n[4]: http://en.wikipedia.org/wiki/Strongly_connected_component\r\n[5]: http://en.wikipedia.org/wiki/Directed_graph\r\n[6]: http://en.wikipedia.org/wiki/Efferent_coupling\r\n[7]: http://en.wikipedia.org/wiki/Centrality\r\n[8]: http://en.wikipedia.org/wiki/Eigenvector\r\n[9]: http://en.wikipedia.org/wiki/Adjacency_matrix","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}